{"version":3,"file":"js/bundle.js","mappings":"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","sources":["webpack://life/./src/drawField.ts","webpack://life/./src/getCellState.ts","webpack://life/./src/index.ts","webpack://life/./src/GameOfLife.ts","webpack://life/./src/getNextState.ts","webpack://life/./src/getNewCellState.ts","webpack://life/./src/getNumOfAliveNeighbours.ts","webpack://life/./src/isAnyoneAlive.ts"],"sourcesContent":["export function drawField(\n  htmlElement: HTMLElement,\n  field: number[][],\n  onCellClick: (x: number, y: number) => void\n) {\n  const rowIterator = (row: number[], rowIndex: number) => {\n    return `<tr>${row\n      .map((cell: number, columnIndex: number) => {\n        if (cell === 1) {\n          return `<td \n            data-x=${columnIndex}\n            data-y=${rowIndex}\n            class=\"cell alive\" \n            style=\"background-color:#FA58D0; height:10px; width:10px;\"></td>`;\n        }\n        return `<td \n            data-x=${columnIndex}\n            data-y=${rowIndex}\n            class=\"cell dead\" \n            style=\"background-color:#FFFFFF; height:10px; width:10px;\"></td>`;\n      })\n      .join(\"\")}</tr>`;\n  };\n\n  const table = document.createElement(\"table\");\n  table.setAttribute(\"border\", \"1\");\n  table.innerHTML = field.map(rowIterator).join(\"\");\n  table.addEventListener(\"click\", (ev) => {\n    const clickedElement = <HTMLElement>ev.target;\n    const x = Number(clickedElement.getAttribute(\"data-x\"));\n    const y = Number(clickedElement.getAttribute(\"data-y\"));\n    if (x >= 0 && y >= 0) {\n      onCellClick(x, y);\n    }\n  });\n\n  htmlElement.innerHTML = \"\";\n  htmlElement.append(table);\n}\n","export function getCellState(field: number[][], x: number, y: number) {\n  const row = field[y];\n  if (row === undefined) {\n    return 0;\n  }\n  const cell = row[x];\n  if (cell === undefined) {\n    return 0;\n  }\n  return cell;\n}\n","import GameOfLife from \"./GameOfLife\";\n\nnew GameOfLife(document.getElementById(\"root\") as HTMLElement, 5, 5);\n","import { drawField } from \"./drawField\";\nimport { getNextState } from \"./getNextState\";\nimport { isAnyoneAlive } from \"./isAnyoneAlive\";\n\nclass GameOfLife {\n  // Html elements\n  private rootElement: HTMLElement;\n  private fieldWrapper!: HTMLDivElement;\n  private button!: HTMLButtonElement;\n  private inputX!: HTMLInputElement;\n  private inputY!: HTMLInputElement;\n\n  // Game properties\n  private x: number;\n  private y: number;\n  private gameIsRunning = false;\n  private timer: NodeJS.Timer | undefined;\n  private speed = 1000;\n  private field!: number[][];\n\n  constructor(rootElement: HTMLElement, x: number, y: number) {\n    this.rootElement = rootElement;\n    this.x = x;\n    this.y = y;\n    this.createMarkup(this.x, this.y);\n    this.makeField(this.x, this.y);\n  }\n\n  createMarkup(x: number, y: number) {\n    this.inputX = document.createElement(\"input\");\n    this.inputX.type = \"number\";\n    this.inputX.placeholder = \"X\";\n    this.inputX.value = String(x);\n    this.inputX.addEventListener(\"change\", (event: Event) => {\n      const target = event.currentTarget as HTMLInputElement;\n      this.updateCols(Number(target.value));\n    });\n\n    this.inputY = document.createElement(\"input\");\n    this.inputY.type = \"number\";\n    this.inputY.placeholder = \"Y\";\n    this.inputY.value = String(y);\n    this.inputY.addEventListener(\"change\", (event: Event) => {\n      const target = event.currentTarget as HTMLInputElement;\n      this.updateRows(Number(target.value));\n    });\n\n    const inputRange = document.createElement(\"input\");\n    inputRange.type = \"range\";\n    inputRange.setAttribute(\"min\", \"100\");\n    inputRange.setAttribute(\"max\", \"10000\");\n    inputRange.setAttribute(\"value\", String(this.speed));\n    inputRange.setAttribute(\"step\", \"100\");\n    inputRange.addEventListener(\"change\", (event) => {\n      const target = event.currentTarget as HTMLInputElement;\n      this.speed = Number(target.value);\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.start();\n      }\n    });\n\n    this.fieldWrapper = document.createElement(\"div\");\n    this.fieldWrapper.className = \"field-wrapper\";\n\n    this.button = document.createElement(\"button\");\n    this.button.innerHTML = \"Start\";\n    this.button.addEventListener(\"click\", () => {\n      this.gameIsRunning ? this.stop() : this.start();\n    });\n\n    this.rootElement.append(this.inputX);\n    this.rootElement.append(this.inputY);\n    this.rootElement.append(inputRange);\n    this.rootElement.append(this.fieldWrapper);\n    this.rootElement.append(this.button);\n  }\n\n  updateCols(colsCount: number) {\n    if (colsCount <= 0 || colsCount > 30) {\n      return;\n    }\n\n    if (colsCount > this.x) {\n      while (colsCount > this.x) {\n        this.x++;\n        this.field.forEach((row) => {\n          row.push(0);\n        });\n      }\n    }\n\n    if (colsCount < this.x) {\n      while (colsCount < this.x) {\n        this.x--;\n        this.field.forEach((row) => {\n          row.pop();\n        });\n      }\n    }\n\n    drawField(this.fieldWrapper, this.field, this.cellClickHandler);\n  }\n\n  updateRows(rowsCount: number) {\n    if (rowsCount <= 0 || rowsCount > 30) {\n      return;\n    }\n\n    if (rowsCount > this.y) {\n      while (rowsCount > this.y) {\n        this.y++;\n        this.field.push(new Array(this.x).fill(0));\n      }\n    }\n\n    if (rowsCount < this.y) {\n      while (rowsCount < this.y) {\n        this.y--;\n        this.field.pop();\n      }\n    }\n\n    drawField(this.fieldWrapper, this.field, this.cellClickHandler);\n  }\n\n  makeField(x: number, y: number) {\n    this.field = Array.from({ length: y }).map(() => new Array(x).fill(0));\n\n    // Отрисовать поле заданного размера\n    drawField(this.fieldWrapper, this.field, this.cellClickHandler);\n  }\n\n  start() {\n    this.gameIsRunning = true;\n    this.button.innerHTML = \"Stop\";\n\n    this.timer = setInterval(() => {\n      this.field = getNextState(this.field);\n      drawField(this.fieldWrapper, this.field, this.cellClickHandler);\n      if (!isAnyoneAlive(this.field)) {\n        alert(\"Death on the block\");\n        this.stop();\n      }\n    }, this.speed);\n  }\n\n  stop() {\n    this.gameIsRunning = false;\n    this.button.innerHTML = \"Start\";\n\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n\n  cellClickHandler = (x: number, y: number) => {\n    this.field[y][x] = this.field[y][x] === 0 ? 1 : 0;\n    drawField(this.fieldWrapper, this.field, this.cellClickHandler);\n  };\n}\n\nexport default GameOfLife;\n","import { getNumOfAliveNeighbours } from \"./getNumOfAliveNeighbours\";\nimport { getCellState } from \"./getCellState\";\nimport { getNewCellState } from \"./getNewCellState\";\n\nexport function getNextState(field: number[][]) {\n  return field.map((row, rowIndex) =>\n    row.map((cell, cellIndex) => {\n      const an = getNumOfAliveNeighbours(cellIndex, rowIndex, field);\n      const currentState = getCellState(field, cellIndex, rowIndex);\n      return getNewCellState(currentState, an);\n    })\n  );\n}\n","export function getNewCellState(\n  currentCellState: number,\n  numOfAliveNeighbours: number\n): number {\n  if (numOfAliveNeighbours === 3) {\n    return 1;\n  }\n  if (numOfAliveNeighbours > 3 || numOfAliveNeighbours < 2) {\n    return 0;\n  }\n  if (numOfAliveNeighbours === 2 && currentCellState === 1) {\n    return 1;\n  }\n  return 0;\n}\n","import { getCellState } from \"./getCellState\";\n\nexport function getNumOfAliveNeighbours(\n  column: number,\n  row: number,\n  field: number[][]\n): number {\n  let neighbours = 0;\n\n  for (let j = column - 1; j <= column + 1; j += 1) {\n    neighbours += Number(getCellState(field, j, row - 1));\n  }\n\n  for (let j = column - 1; j <= column + 1; j += 1) {\n    neighbours += Number(getCellState(field, j, row + 1));\n  }\n\n  neighbours += Number(getCellState(field, column - 1, row));\n  neighbours += Number(getCellState(field, column + 1, row));\n\n  return neighbours;\n}\n","export function isAnyoneAlive(field: number[][]): boolean {\n  for (let i = 0; i < field.length; i += 1) {\n    const row = field[i];\n    for (let j = 0; j < row.length; j += 1) {\n      const cell = row[j];\n      if (cell) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"],"names":["drawField","htmlElement","field","onCellClick","table","document","createElement","setAttribute","innerHTML","map","row","rowIndex","cell","columnIndex","join","addEventListener","ev","clickedElement","target","x","Number","getAttribute","y","append","getCellState","undefined","GameOfLife","rootElement","fieldWrapper","cellClickHandler","this","createMarkup","makeField","inputX","type","placeholder","value","String","event","currentTarget","updateCols","inputY","updateRows","inputRange","speed","timer","clearInterval","start","className","button","gameIsRunning","stop","colsCount","forEach","push","pop","rowsCount","Array","fill","from","length","setInterval","cellIndex","numOfAliveNeighbours","an","column","neighbours","j","getNumOfAliveNeighbours","currentState","i","isAnyoneAlive","alert","getElementById"],"sourceRoot":""}