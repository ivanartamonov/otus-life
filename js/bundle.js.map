{"version":3,"file":"js/bundle.js","mappings":"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","sources":["webpack://life/./src/drawField.ts","webpack://life/./src/getCellState.ts","webpack://life/./src/index.ts","webpack://life/./src/createGameOfLife.ts","webpack://life/./src/getNextState.ts","webpack://life/./src/getNewCellState.ts","webpack://life/./src/getNumOfAliveNeighbours.ts","webpack://life/./src/isAnyoneAlive.ts"],"sourcesContent":["export function drawField(\n  htmlElement: HTMLElement,\n  field: number[][],\n  onCellClick: (x: number, y: number) => void\n) {\n  const rowIterator = (row: number[], rowIndex: number) => {\n    return `<tr>${row\n      .map((cell: number, columnIndex: number) => {\n        if (cell === 1) {\n          return `<td \n            data-x=${columnIndex}\n            data-y=${rowIndex}\n            class=\"cell alive\" \n            style=\"background-color:#FA58D0; height:10px; width:10px;\"></td>`;\n        }\n        return `<td \n            data-x=${columnIndex}\n            data-y=${rowIndex}\n            class=\"cell dead\" \n            style=\"background-color:#FFFFFF; height:10px; width:10px;\"></td>`;\n      })\n      .join(\"\")}</tr>`;\n  };\n\n  const table = document.createElement(\"table\");\n  table.setAttribute(\"border\", \"1\");\n  table.innerHTML = field.map(rowIterator).join(\"\");\n  table.addEventListener(\"click\", (ev) => {\n    const clickedElement = <HTMLElement>ev.target;\n    const x = Number(clickedElement.getAttribute(\"data-x\"));\n    const y = Number(clickedElement.getAttribute(\"data-y\"));\n    if (x >= 0 && y >= 0) {\n      onCellClick(x, y);\n    }\n  });\n\n  htmlElement.innerHTML = \"\";\n  htmlElement.append(table);\n}\n","export function getCellState(field: number[][], x: number, y: number) {\n  const row = field[y];\n  if (row === undefined) {\n    return 0;\n  }\n  const cell = row[x];\n  if (cell === undefined) {\n    return 0;\n  }\n  return cell;\n}\n","import { createGameOfLife } from \"./createGameOfLife\";\n\n// Запуск игры\n//\n// - создать элемент и добавить его на страницу\n// - создать на этом элементе игру с помощью `createGameOfLife` с размерами поля x / y\n// - для проверки своего кода можно создать еще один элемент и создать вторую игру на этой же странице\n\nconst gameWrapper1: HTMLElement = document.createElement(\"div\");\nconst gameWrapper2: HTMLElement = document.createElement(\"div\");\n\ndocument.body.appendChild(gameWrapper1);\ndocument.body.appendChild(gameWrapper2);\n\ncreateGameOfLife(4, 5, gameWrapper1);\n//createGameOfLife(10, 10, gameWrapper2);\n","import { drawField } from \"./drawField\";\nimport { getNextState } from \"./getNextState\";\nimport { isAnyoneAlive } from \"./isAnyoneAlive\";\n\nexport function createGameOfLife(\n  sizeX: number,\n  sizeY: number,\n  htmlElement: HTMLElement\n) {\n  let gameIsRunning = false;\n  let timer: NodeJS.Timeout;\n\n  // Создать блок для поля\n  // Создать кнопку управления игрой\n  htmlElement.innerHTML = `<div class=\"field-wrapper\"></div><button>Start</button>`;\n  const fieldWrapper = <HTMLElement>htmlElement.querySelector(\".field-wrapper\");\n  const button = <HTMLButtonElement>htmlElement.querySelector(\"button\");\n\n  // Создать поле заданного размера\n  let field: number[][] = Array.from({ length: sizeY }).map(() =>\n    new Array(sizeX).fill(0)\n  );\n\n  const cellClickHandler = (x: number, y: number) => {\n    field[y][x] = field[y][x] === 0 ? 1 : 0;\n    drawField(fieldWrapper, field, cellClickHandler);\n  };\n\n  // Отрисовать поле заданного размера\n  drawField(fieldWrapper, field, cellClickHandler);\n\n  // При клике по ячейке поля\n  // - поменять его состояние\n  // - перерисовать поле\n  function stopGame() {\n    gameIsRunning = false;\n    button.innerHTML = \"Start\";\n    // При клике на кнопке `Stop` остановить таймер\n    clearInterval(timer);\n  }\n\n  function startGame() {\n    // При клике по кнопке старт\n    // - поменять надпись на `Stop`\n    gameIsRunning = true;\n    button.innerHTML = \"Stop\";\n    // - запустить таймер для обновления поля\n    timer = setInterval(() => {\n      // В таймере обновления поля\n      // - посчитать новое состояние поля\n      // - отрисовать новое состояние поля\n      // - проверить, что есть живые клетки\n      // - если живых клеток нет\n      //    - остановить таймер\n      //    - вывести сообщение\n      field = getNextState(field);\n      drawField(fieldWrapper, field, cellClickHandler);\n      if (!isAnyoneAlive(field)) {\n        alert(\"Death on the block\");\n        stopGame();\n      }\n    }, 1000);\n  }\n\n  button.addEventListener(\"click\", () => {\n    if (!gameIsRunning) {\n      startGame();\n    } else {\n      stopGame();\n    }\n  });\n}\n","import { getNumOfAliveNeighbours } from \"./getNumOfAliveNeighbours\";\nimport { getCellState } from \"./getCellState\";\nimport { getNewCellState } from \"./getNewCellState\";\n\nexport function getNextState(field: number[][]) {\n  return field.map((row, rowIndex) =>\n    row.map((cell, cellIndex) => {\n      const an = getNumOfAliveNeighbours(cellIndex, rowIndex, field);\n      const currentState = getCellState(field, cellIndex, rowIndex);\n      return getNewCellState(currentState, an);\n    })\n  );\n}\n","export function getNewCellState(\n  currentCellState: number,\n  numOfAliveNeighbours: number\n): number {\n  if (numOfAliveNeighbours === 3) {\n    return 1;\n  }\n  if (numOfAliveNeighbours > 3 || numOfAliveNeighbours < 2) {\n    return 0;\n  }\n  if (numOfAliveNeighbours === 2 && currentCellState === 1) {\n    return 1;\n  }\n  return 0;\n}\n","import { getCellState } from \"./getCellState\";\n\nexport function getNumOfAliveNeighbours(\n  column: number,\n  row: number,\n  field: number[][]\n): number {\n  let neighbours = 0;\n\n  for (let j = column - 1; j <= column + 1; j += 1) {\n    neighbours += Number(getCellState(field, j, row - 1));\n  }\n\n  for (let j = column - 1; j <= column + 1; j += 1) {\n    neighbours += Number(getCellState(field, j, row + 1));\n  }\n\n  neighbours += Number(getCellState(field, column - 1, row));\n  neighbours += Number(getCellState(field, column + 1, row));\n\n  return neighbours;\n}\n","export function isAnyoneAlive(field: number[][]): boolean {\n  for (let i = 0; i < field.length; i += 1) {\n    const row = field[i];\n    for (let j = 0; j < row.length; j += 1) {\n      const cell = row[j];\n      if (cell) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"],"names":["drawField","htmlElement","field","onCellClick","table","document","createElement","setAttribute","innerHTML","map","row","rowIndex","cell","columnIndex","join","addEventListener","ev","clickedElement","target","x","Number","getAttribute","y","append","getCellState","undefined","gameWrapper1","gameWrapper2","body","appendChild","sizeX","sizeY","timer","gameIsRunning","fieldWrapper","querySelector","button","Array","from","length","fill","cellClickHandler","stopGame","clearInterval","setInterval","cellIndex","numOfAliveNeighbours","an","column","neighbours","j","getNumOfAliveNeighbours","currentState","getNextState","i","isAnyoneAlive","alert","createGameOfLife"],"sourceRoot":""}